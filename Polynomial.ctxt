#BlueJ class context
comment0.params=s
comment0.target=Polynomial(java.lang.String)
comment0.text=\r\n\ Constructor\ of\ class\ Polynomial.\r\n\ \r\n\ @param\ s\ String\ which\ represents\ the\ polynomial\ expression.\ Must\ be\r\n\ composed\ of\ double/integer\ or\ integer/integer\ pairs.\r\n\ \r\n\ @throws\ IllegalArgumentException\ if\ non-numbers\ are\ passed\ to\ constructor.\r\n
comment1.params=p
comment1.target=Polynomial(Polynomial)
comment1.text=\r\n\ Constructor\ for\ class\ Polynomial.\ Creates\ a\ deep\ copy\ of\ a\ polynomial\r\n\ expression,\ does\ not\ modify\ original.\r\n\ \r\n\ @param\ p\ the\ polynomial\ object\ to\ be\ copied.\r\n\ @throws\ NullPointerException\ if\ passed\ Polynomial\ is\ null.\r\n
comment10.params=node\ x
comment10.target=double\ evaluate(Polynomial.Node,\ double)
comment11.params=o
comment11.target=boolean\ equals(java.lang.Object)
comment11.text=\r\n\ Checks\ for\ content\ equality.\r\n\ \r\n\ @param\ o\ the\ object\ to\ be\ compared\ for\ equality.\r\n\ @return\ true\ if\ the\ two\ polynomials\ are\ equal.\r\n
comment12.params=main\ test
comment12.target=boolean\ equals(Polynomial.Node,\ Polynomial.Node)
comment13.params=
comment13.target=Polynomial\ derivative()
comment13.text=\r\n\ Calculates\ the\ derivative\ of\ the\ polynomial.\r\n\ \r\n\ @return\ the\ derived\ polynomial\ expression.\r\n\ @throws\ IllegalStateException\ if\ a\ null\ polynomial\ is\ attempted\ to\ be\ derived.\r\n
comment14.params=node\ poly
comment14.target=void\ derive(Polynomial.Node,\ Polynomial)
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\r\n\ Returns\ a\ String\ representation\ of\ this\ polynomial.\r\n\ \r\n\ @return\ a\ string\ representation\ of\ this\ polynomial.\r\n
comment16.params=string\ node
comment16.target=java.lang.String\ toString(java.lang.String,\ Polynomial.Node)
comment17.params=
comment17.target=java.lang.String\ description()
comment17.text=\r\n\ Returns\ a\ String\ representation\ of\ this\ polynomial.\ The\ format\ is\ in\r\n\ ascending\ order\ of\ degree,\ beginning\ with\ constant\ term\ if\ such\ exists.\r\n\ \r\n\ @return\ a\ String\ representation\ of\ this\ polynomial.\r\n
comment18.params=string\ node
comment18.target=java.lang.String\ description(java.lang.String,\ Polynomial.Node)
comment19.params=a\ b
comment19.target=Polynomial\ sum(Polynomial,\ Polynomial)
comment19.text=\r\n\ Static\ method\ which\ will\ take\ two\ polynomials\ and\ find\ their\ sum.\r\n\ \r\n\ @param\ a\ the\ first\ polynomial.\r\n\ @param\ b\ the\ second\ polynomial.\r\n\ @return\ the\ new\ polynomial\ representing\ the\ sum\ of\ the\ other\ two.\r\n\ \r\n\ @throws\ NullPointerException\ if\ either\ polynomial\ is\ null.\r\n
comment2.params=
comment2.target=int\ terms()
comment2.text=\r\n\ Returns\ the\ number\ of\ terms\ in\ this\ expression.\r\n\ \r\n\ @return\ the\ number\ of\ terms\ in\ this\ expression.\r\n
comment20.params=a\ b
comment20.target=Polynomial\ product(Polynomial,\ Polynomial)
comment20.text=\r\n\ Static\ method\ which\ will\ take\ two\ polynomials\ and\ find\ their\ product.\r\n\ \r\n\ @param\ a\ the\ first\ polynomial.\r\n\ @param\ b\ the\ second\ polynomial.\r\n\ @return\ the\ new\ polynomial\ representing\ the\ product\ of\ the\ other\ two.\r\n\ \r\n\ @throws\ NullPointerException\ if\ either\ polynomial\ is\ null.\r\n
comment3.params=coef\ exp
comment3.target=void\ addTerm(double,\ int)
comment3.text=\r\n\ Adds\ a\ term\ to\ the\ polynomial\ expression.\r\n\ \r\n\ @param\ coef\ the\ coefficient\ of\ the\ new\ term.\r\n\ @param\ exp\ the\ exponent\ of\ the\ new\ term.\r\n\ @throws\ IllegalArgumentException\ if\ a\ negative\ exponent\ value\ is\ passed.\r\n
comment4.params=prev\ add\ current
comment4.target=void\ addTerm(Polynomial.Node,\ Polynomial.Node,\ Polynomial.Node)
comment5.params=exp
comment5.target=double\ deleteTerm(int)
comment5.text=\r\n\ Deletes\ a\ term\ from\ the\ polynomial\ expression\ and\ returns\ that\ term's\ \r\n\ coefficient.\r\n\ \r\n\ @param\ the\ exponent\ of\ the\ term\ to\ be\ deleted.\r\n\ @return\ the\ coefficient\ of\ the\ deleted\ term,\ 0.0\ if\ that\ term\ does\ not\ exist.\r\n
comment6.params=previous\ check\ current
comment6.target=double\ deleteTerm(Polynomial.Node,\ Polynomial.Node,\ Polynomial.Node)
comment7.params=exp
comment7.target=double\ getCoefficient(int)
comment7.text=\r\n\ Returns\ the\ coefficient\ value\ of\ the\ specified\ term.\r\n\ \r\n\ @param\ exp\ the\ exponent\ of\ the\ term\ being\ searched\ for.\r\n\ @return\ the\ coefficient\ of\ the\ specified\ term.\r\n
comment8.params=node\ exp
comment8.target=double\ getCoefficient(Polynomial.Node,\ int)
comment9.params=x
comment9.target=double\ evaluate(double)
comment9.text=\r\n\ Plugs\ in\ a\ value\ for\ x\ and\ evaluates\ the\ expression.\r\n\ \r\n\ @param\ x\ the\ x\ value.\r\n\ @return\ the\ evaluated\ expression's\ numerical\ value.\r\n
numComments=21
